syntax = "proto3";

package koinos.mempool;
option go_package = "github.com/koinos/koinos-proto-golang/koinos/mempool";

import "koinos/options.proto";
import "koinos/protocol/protocol.proto";
import "koinos/rpc.proto";

message pending_transaction {
   protocol.transaction transaction = 1;
   uint64 disk_storage_used = 2 [jstype = JS_STRING];
   uint64 network_bandwidth_used = 3 [jstype = JS_STRING];
   uint64 compute_bandwidth_used = 4 [jstype = JS_STRING];
}

message check_pending_account_resources_request {
   bytes payer = 1 [(btype) = ADDRESS];
   uint64 max_payer_rc = 2 [jstype = JS_STRING];
   uint64 rc_limit = 3 [jstype = JS_STRING];
   optional bytes block_id = 4 [(btype) = BLOCK_ID];
}

message check_pending_account_resources_response {
   bool success = 1;
}

message get_pending_transactions_request {
   uint64 limit = 1 [jstype = JS_STRING];
   optional bytes block_id = 2 [(btype) = BLOCK_ID];
}

message get_pending_transactions_response {
   repeated pending_transaction pending_transactions = 1;
}

message check_account_nonce_request {
   bytes payee = 1 [(btype) = ADDRESS];
   bytes nonce = 2;
   optional bytes block_id = 3 [(btype) = BLOCK_ID];
}

message check_account_nonce_response {
   bool success = 1;
}

message check_transaction_eligibility_request {
   bytes payer = 1 [(btype) = ADDRESS];
   bytes payee = 2 [(btype) = ADDRESS];
   bytes nonce = 3;
   uint64 max_payer_rc = 4 [jstype = JS_STRING];
   uint64 rc_limit = 5 [jstype = JS_STRING];

   optional bytes block_id = 1000 [(btype) = BLOCK_ID];
}

message check_transaction_eligibility_response {
   bool success = 1;
}

message mempool_request {
   oneof request {
      reserved_rpc reserved = 1;
      check_pending_account_resources_request check_pending_account_resources = 2;
      get_pending_transactions_request get_pending_transactions = 3;
      check_account_nonce_request check_account_nonce = 4;
      check_transaction_eligibility_request check_transaction_eligibility = 5;
   }
}

message mempool_response {
   oneof response {
      reserved_rpc reserved = 1;
      error_status error = 2;
      check_pending_account_resources_response check_pending_account_resources = 3;
      get_pending_transactions_response get_pending_transactions = 4;
      check_account_nonce_response check_account_nonce = 5;
      check_transaction_eligibility_response check_transaction_eligibility = 6;
   }
}
